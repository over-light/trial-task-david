// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

//Dashboard Schema
model Dashboards {
  id          String    @id @default(cuid())
  name        String
  tab         Int       @unique
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  Layouts     Layouts[]
  Widgets     Widgets[]

  @@index([tab])
}

//layout schema
model Layouts {
  id          String  @id @default(cuid())
  dashboardId String
  w           Int
  h           Int
  x           Int
  y           Int
  i           String
  moved       Boolean
  static      Boolean

  dasboard Dashboards @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
}

//Widget schema
model Widgets {
  id          String @id @default(cuid())
  dashboardId String
  name        String

  dasboard Dashboards @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  walletAddress    String            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  CryptoLoginNonce CryptoLoginNonce?
  Dashboards       Dashboards[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CryptoLoginNonce {
  userId  String   @unique
  nonce   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
