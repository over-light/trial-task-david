// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

//Layout Schema
model Layouts {
  id             String           @id @default(cuid())
  name           String           @unique
  createdBy      User             @relation(fields: [createdById], references: [id])
  createdById    String
  Layout_Widgets Layout_Widgets[]
}

//Widget schema
model Widgets {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  Layout_Widgets Layout_Widgets[]

  @@index([name])
}

//Layout_Widget schema
model Layout_Widgets {
  layoutId     String
  widgetId     String
  widgetConfig Json?

  layout Layouts @relation(fields: [layoutId], references: [id])
  widget Widgets @relation(fields: [widgetId], references: [id])

  @@id([layoutId, widgetId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Layouts       Layouts[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
